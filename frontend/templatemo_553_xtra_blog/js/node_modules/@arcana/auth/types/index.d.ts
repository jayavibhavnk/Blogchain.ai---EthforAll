import { ArcanaProvider } from './provider';
import { AppConfig, ConstructorParams, ChainConfigInput, NetworkConfig, Position, RpcConfig, Theme, ThemeConfig, UserInfo, Logins, EthereumProvider } from './typings';
import { Chain } from './chainList';
declare class AuthProvider {
    appId: string;
    private params;
    private appConfig;
    private iframeWrapper;
    private networkConfig;
    private rpcConfig;
    private initStatus;
    private initPromises;
    private _provider;
    private connectCtrl;
    constructor(appAddress: string, p?: Partial<ConstructorParams>);
    /**
     * A function to initialize the wallet, should be called before getting provider
     */
    init(): Promise<AuthProvider>;
    /**
     * A function to open login plug n play modal
     */
    connect(): Promise<EthereumProvider>;
    /**
     * A function to trigger social login in the wallet
     */
    loginWithSocial: (loginType: string) => Promise<EthereumProvider>;
    /**
     * A function to trigger passwordless login in the wallet
     */
    loginWithLink: (email: string) => Promise<EthereumProvider>;
    get connected(): boolean;
    /**
     * A function to get user info for logged in user
     * @returns available user info
     */
    getUser(): Promise<UserInfo>;
    /**
     * A function to determine whether user is logged in
     */
    isLoggedIn(): Promise<boolean>;
    /**
     * A function to logout the user
     */
    logout(): Promise<void>;
    /**
     * A function to request public key of different users
     */
    getPublicKey(email: string): Promise<string>;
    /**
     * A function to request list of available logins
     */
    getLogins(): Promise<Logins[]>;
    /**
     * A function to get web3 provider
     * @deprecated use .provider instead
     */
    getProvider(): ArcanaProvider;
    private getLoginUrl;
    /**
     * @internal
     */
    get chainId(): string;
    private beginLogin;
    private waitForConnect;
    private setAppConfig;
    private waitForInit;
    private resolveInitPromises;
    /**
     * @internal
     */
    get provider(): ArcanaProvider;
    get logo(): {
        horizontal: string;
        vertical: string;
    };
    get theme(): Theme;
    private setProviders;
}
export { AuthProvider, ConstructorParams, ChainConfigInput, Chain as CHAIN, EthereumProvider, AppConfig, Theme, Position, RpcConfig, Logins, UserInfo, ThemeConfig, NetworkConfig, };
