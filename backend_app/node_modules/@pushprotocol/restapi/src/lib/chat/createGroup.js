"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createGroup = void 0;
const tslib_1 = require("tslib");
const axios_1 = require("axios");
const helpers_1 = require("../helpers");
const constants_1 = require("../constants");
const helpers_2 = require("./helpers");
const CryptoJS = require("crypto-js");
const createGroup = (options) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { groupName, groupDescription, members, groupImage, admins, isPublic, contractAddressNFT, numberOfNFTs, contractAddressERC20, numberOfERC20, groupCreator, account, env = constants_1.default.ENV.PROD, pgpPrivateKey = null, } = options || {};
    try {
        (0, helpers_2.createGroupRequestValidator)(groupName, members, admins, groupCreator, contractAddressNFT, numberOfNFTs, contractAddressERC20, numberOfERC20);
        const convertedMembers = members.map(helpers_1.walletToPCAIP10);
        const convertedAdmins = admins.map(helpers_1.walletToPCAIP10);
        const bodyToBeHashed = {
            groupName: groupName,
            groupDescription: groupDescription == undefined ? null : groupDescription,
            members: convertedMembers,
            groupImage: groupImage,
            admins: convertedAdmins,
            isPublic: isPublic,
            contractAddressNFT: contractAddressNFT == undefined ? null : contractAddressNFT,
            numberOfNFTs: numberOfNFTs == undefined ? 0 : numberOfNFTs,
            contractAddressERC20: contractAddressERC20 == undefined ? null : contractAddressERC20,
            numberOfERC20: numberOfERC20 == undefined ? 0 : numberOfERC20,
            groupCreator: (0, helpers_1.walletToPCAIP10)(groupCreator)
        };
        const connectedUser = yield (0, helpers_2.getConnectedUser)(account, pgpPrivateKey, env);
        const hash = CryptoJS.SHA256(JSON.stringify(bodyToBeHashed)).toString();
        const signature = yield (0, helpers_2.sign)({ message: hash, signingKey: connectedUser.privateKey });
        const sigType = "pgp";
        const verificationProof = sigType + ":" + signature;
        const API_BASE_URL = (0, helpers_1.getAPIBaseUrls)(env);
        const apiEndpoint = `${API_BASE_URL}/v1/chat/groups`;
        const body = (0, helpers_2.createGroupPayload)(groupName, groupDescription, convertedMembers, groupImage, convertedAdmins, isPublic, (0, helpers_1.walletToPCAIP10)(groupCreator), verificationProof, contractAddressNFT, numberOfNFTs, contractAddressERC20, numberOfERC20);
        return axios_1.default
            .post(apiEndpoint, body)
            .then((response) => {
            return response.data;
        })
            .catch((err) => {
            throw new Error(err);
        });
    }
    catch (err) {
        console.error(`[EPNS-SDK] - API  - Error - API send() -:  `, err);
        throw Error(`[EPNS-SDK] - API  - Error - API send() -: ${err}`);
    }
});
exports.createGroup = createGroup;
//# sourceMappingURL=createGroup.js.map