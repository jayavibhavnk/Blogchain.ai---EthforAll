"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateGroupRequestValidator = exports.createGroupRequestValidator = void 0;
const helpers_1 = require("../../helpers");
const createGroupRequestValidator = (groupName, members, admins, groupCreator, contractAddressNFT, numberOfNFTs, contractAddressERC20, numberOfERC20) => {
    if (groupName == null || groupName.length == 0) {
        throw new Error(`groupName cannot be null or empty`);
    }
    if (groupName.length >= 256) {
        throw new Error(`groupName cannot be more than 256 characters`);
    }
    if (members == null) {
        throw new Error(`members cannot be null`);
    }
    for (let i = 0; i < members.length; i++) {
        if (members[i] && !(0, helpers_1.isValidETHAddress)(members[i])) {
            throw new Error(`Invalid member address!`);
        }
    }
    if (admins == null) {
        throw new Error(`admins cannot be null`);
    }
    for (let i = 0; i < admins.length; i++) {
        if (!(0, helpers_1.isValidETHAddress)(admins[i])) {
            throw new Error(`Invalid admin address!`);
        }
    }
    if (!(0, helpers_1.isValidETHAddress)(groupCreator)) {
        throw new Error(`Invalid groupCreator address!`);
    }
    if (contractAddressNFT != null && (contractAddressNFT === null || contractAddressNFT === void 0 ? void 0 : contractAddressNFT.length) > 0 && !(0, helpers_1.isValidETHAddress)(contractAddressNFT)) {
        throw new Error(`Invalid contractAddressNFT address!`);
    }
    if (numberOfNFTs != null && numberOfNFTs < 0) {
        throw new Error(`numberOfNFTs cannot be negative number`);
    }
    if (contractAddressERC20 != null && (contractAddressERC20 === null || contractAddressERC20 === void 0 ? void 0 : contractAddressERC20.length) > 0 && !(0, helpers_1.isValidETHAddress)(contractAddressERC20)) {
        throw new Error(`Invalid contractAddressERC20 address!`);
    }
    if (numberOfERC20 != null && numberOfERC20 < 0) {
        throw new Error(`numberOfERC20 cannot be negative number`);
    }
};
exports.createGroupRequestValidator = createGroupRequestValidator;
const updateGroupRequestValidator = (chatId, groupName, profilePicture, members, admins, address) => {
    if (chatId == null || chatId.length == 0) {
        throw new Error(`chatId cannot be null or empty`);
    }
    if (groupName == null || groupName.length == 0) {
        throw new Error(`groupName cannot be null or empty`);
    }
    if (profilePicture == null || profilePicture.length == 0) {
        throw new Error(`profilePicture cannot be null or empty`);
    }
    if (groupName != null && groupName.length >= 256) {
        throw new Error(`groupName cannot be more than 256 characters`);
    }
    if (members != null && members.length > 0) {
        for (let i = 0; i < members.length; i++) {
            if (!(0, helpers_1.isValidETHAddress)(members[i])) {
                throw new Error(`Invalid member address in members list!`);
            }
        }
    }
    if (admins != null && admins.length > 0) {
        for (let i = 0; i < admins.length; i++) {
            if (!(0, helpers_1.isValidETHAddress)(admins[i])) {
                throw new Error(`Invalid member address in admins list!`);
            }
        }
    }
    if (address != null && !(0, helpers_1.isValidETHAddress)(address)) {
        throw new Error(`Invalid address field!`);
    }
};
exports.updateGroupRequestValidator = updateGroupRequestValidator;
//# sourceMappingURL=validator.js.map