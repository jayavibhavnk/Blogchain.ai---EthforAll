"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateGroup = void 0;
const tslib_1 = require("tslib");
const axios_1 = require("axios");
const helpers_1 = require("../helpers");
const constants_1 = require("../constants");
const helpers_2 = require("./helpers");
const helpers_3 = require("../../../src/lib/helpers");
const updateGroup = (options) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { chatId, groupName, profilePicture, members, admins, address, account, env = constants_1.default.ENV.PROD, pgpPrivateKey = null, } = options || {};
    try {
        (0, helpers_2.updateGroupRequestValidator)(chatId, groupName, profilePicture, members, admins, address);
        const connectedUser = yield (0, helpers_2.getConnectedUser)(account, pgpPrivateKey, env);
        let pvtkey = null;
        if (connectedUser === null || connectedUser === void 0 ? void 0 : connectedUser.encryptedPrivateKey) {
            pvtkey = yield (0, helpers_3.decryptWithWalletRPCMethod)(connectedUser.encryptedPrivateKey, account);
        }
        const bodyToBeHashed = {
            groupName: groupName,
            profilePicture: profilePicture,
            members: members,
            admins: admins,
            chatId: chatId,
        };
        const signature = yield (0, helpers_2.sign)({ message: JSON.stringify(bodyToBeHashed), signingKey: pvtkey });
        const sigType = "pgp";
        const verificationProof = sigType + ":" + signature + ":" + address;
        const API_BASE_URL = (0, helpers_1.getAPIBaseUrls)(env);
        const apiEndpoint = `${API_BASE_URL}/v1/chat/groups/${chatId}`;
        const body = (0, helpers_2.updateGroupPayload)(groupName, profilePicture, members, admins, address, verificationProof);
        return axios_1.default
            .put(apiEndpoint, body)
            .then((response) => {
            return response.data;
        })
            .catch((err) => {
            throw new Error(err);
        });
    }
    catch (err) {
        console.error(`[EPNS-SDK] - API  - Error - API send() -:  `, err);
        throw Error(`[EPNS-SDK] - API  - Error - API send() -: ${err}`);
    }
});
exports.updateGroup = updateGroup;
//# sourceMappingURL=updateGroup.js.map